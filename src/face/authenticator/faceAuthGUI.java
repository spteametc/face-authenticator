package face.authenticator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import static org.bytedeco.javacpp.opencv_core.*;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import static org.bytedeco.javacpp.opencv_highgui.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author serban
 */
public class faceAuthGUI extends javax.swing.JFrame {

    /**
     * Creates new form faceAuthGUI
     */
    protected static String name;
    public static int nrOfPersons=0;
    private Progress progress;
    
    public faceAuthGUI() {
        initComponents();
    }
    
    class Progress extends SwingWorker<Void,Void> {
        @Override
        public Void doInBackground(){
            Integer counter = 0;
            IplImage img = new IplImage();

            nrOfPersons = 0;
            File file = new File("./database/samples");
            File[] files = file.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    nrOfPersons++;
                }
            }
            nrOfPersons++;
            jProgressBar1.setIndeterminate(true);
            jLabel1.setText("Capturing samples and saving them...");

            while (counter < 20) {
                try {
                    //thread to sleep for the specified number of milliseconds
                    Thread.sleep(1000);
                } catch (java.lang.InterruptedException ie) {
                }
                counter++;           
                img = FaceAuthDetector.getFace();
                img = FaceAuthDetector.processImage(img, 92, 112);
                StringBuilder path = new StringBuilder();
                path.append("./database/samples/s");
                path.append(nrOfPersons);
                new File(path.toString()).mkdir();
                path.append("/");
                path.append(counter.toString());
                path.append(".png");
                cvSaveImage(path.toString(), img);
            }
            jLabel1.setText("Doing misc stuff...");
            try {
                FileWriter fileWriter = new FileWriter("database/input.txt", true);
                BufferedWriter writer = new BufferedWriter(fileWriter);
                StringBuilder b = new StringBuilder();
                for (int i = 1; i <= 20; i++) {
                    b.append(nrOfPersons + " ");
                    b.append(name + " ");
                    b.append("database/samples/s" + nrOfPersons + "/" + i + ".png\n");
                }
                writer.append(b.toString());
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            jLabel1.setText("Generating eigenfaces...");
            final FaceAuthRecognizer faceRecognition = new FaceAuthRecognizer();
            faceRecognition.learn("./database/input.txt");
            return null;
        }
        
        @Override
        public void done(){
            jProgressBar1.setIndeterminate(false);
            jLabel1.setText("Done!");
            jButton1.setVisible(true);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        saveDialog = new javax.swing.JDialog();
        saveDialogLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mainSaveButton = new javax.swing.JButton();
        mainAuthButton = new javax.swing.JButton();
        mainMatchButton = new javax.swing.JButton();

        saveDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        saveDialog.setTitle("Processing...");
        saveDialog.setAlwaysOnTop(true);
        saveDialog.setLocation(new java.awt.Point(700, 500));
        saveDialog.setMinimumSize(new java.awt.Dimension(500, 200));
        saveDialog.setType(java.awt.Window.Type.UTILITY);

        saveDialogLabel.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jLabel1, org.jdesktop.beansbinding.ELProperty.create("${text}"), saveDialogLabel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout saveDialogLayout = new javax.swing.GroupLayout(saveDialog.getContentPane());
        saveDialog.getContentPane().setLayout(saveDialogLayout);
        saveDialogLayout.setHorizontalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveDialogLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(saveDialogLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(saveDialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        saveDialogLayout.setVerticalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveDialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Best Face Recognizer Ever");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("disabled"), this, org.jdesktop.beansbinding.BeanProperty.create("resizable"));
        bindingGroup.addBinding(binding);

        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("jLabel1");

        mainSaveButton.setText("Save to database as...");
        mainSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainSaveButtonActionPerformed(evt);
            }
        });

        mainAuthButton.setText("Authenticate");
        mainAuthButton.setToolTipText("");
        mainAuthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainAuthButtonActionPerformed(evt);
            }
        });

        mainMatchButton.setText("Match with...");
        mainMatchButton.setToolTipText("");
        mainMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMatchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(mainAuthButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mainMatchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
                    .addComponent(mainSaveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(mainSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addComponent(mainAuthButton)
                .addGap(100, 100, 100)
                .addComponent(mainMatchButton)
                .addGap(52, 52, 52))
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mainSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainSaveButtonActionPerformed
        if(FaceAuthDetector.getFacesDetected() == 1)  {
//            JOptionPane.showMessageDialog(null, "A counter will appear on the screen which will count to 10 \n"
//                    + " incrementing each second, one increment means that an image of your face \n"
//                    + " was capured. Try to move you head in different positions during this time, \n"
//                    + " and also... smile a bit, you're on camera.");
            name = JOptionPane.showInputDialog(null,
                     "This process can take a while, depending on database size. Be patient!\n"
                    + "Try to move you head in different positions during the processing stage, \n"
                    + " and also... smile a bit, you're on camera.\n Fill in your name "
                             + " please before we continue.", "Confirm Dialog", JOptionPane.OK_CANCEL_OPTION);
            if(name == null || name.isEmpty())
            {
                return;
            }
            //name = name.toLowerCase();
            //name = name.trim();
            //name = name.replaceAll("\\s", "_");
            
            this.saveDialog.setVisible(true);
            jButton1.setVisible(false);
            this.setVisible(false);
            progress = new Progress();
            progress.execute();
        }
        else {
            JOptionPane.showMessageDialog(null, "Please make sure there is only one person "
                    + "on camera. Try again when you see only one red rectangle. \n"
                    + "Or maybe you are just too ugly.");
        }
    }//GEN-LAST:event_mainSaveButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 
        this.jLabel1.setText("");
        this.saveDialog.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void mainAuthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainAuthButtonActionPerformed
        // TODO add your handling code here:
        IplImage img = new IplImage();
        String name = null;
        
        img = FaceAuthDetector.getFace();
        img = FaceAuthDetector.processImage(img, 92, 112);
        
        cvSaveImage("./database/samples/toTest.png", img);
        
        try {
                FileWriter fileWriter = new FileWriter("database/output.txt", false);
                BufferedWriter writer = new BufferedWriter(fileWriter);
                writer.append("0 x ./database/samples/toTest.png");
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        FaceAuthRecognizer faceRecognition = new FaceAuthRecognizer();
        name = faceRecognition.recognizeFileList("./database/output.txt", null);
        
        if(name == null)
        {
            //no match found
            JOptionPane.showMessageDialog(null, "Oh-Oooh, I don't recognize you, quick... somebody call 911.");
        }
        else{
            JOptionPane.showMessageDialog(null, "Hello "+ name + ", nice to see you again!");
        }
    }//GEN-LAST:event_mainAuthButtonActionPerformed

    private void mainMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMatchButtonActionPerformed
        // TODO add your handling code here:
        IplImage img = new IplImage();
        String personName = null, name = null;
        
        img = FaceAuthDetector.getFace();
        img = FaceAuthDetector.processImage(img, 92, 112);
        
        cvSaveImage("./database/samples/toTest.png", img);
        
        personName = JOptionPane.showInputDialog(null,
                    "Please enter the name of the person you want to match with...","Confirm Dialog", JOptionPane.OK_CANCEL_OPTION);
            if(personName == null || personName.isEmpty())
            {
                return;
            }
        try {
                FileWriter fileWriter = new FileWriter("database/output.txt", false);
                BufferedWriter writer = new BufferedWriter(fileWriter);
                writer.append("0 x ./database/samples/toTest.png");
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        FaceAuthRecognizer faceRecognition = new FaceAuthRecognizer();
        name = faceRecognition.recognizeFileList("./database/output.txt", personName);
        
        System.out.print("Name to match with:" + personName + "\n Name found: " + name + "\n");
        
        if(name == null || !name.equals(personName))
        {
            //no match found
            JOptionPane.showMessageDialog(null, "Sorry, you don't match with: " + personName);
        }
        else{
            JOptionPane.showMessageDialog(null, "It's a match!");
        }
        
    }//GEN-LAST:event_mainMatchButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(faceAuthGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(faceAuthGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(faceAuthGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(faceAuthGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new faceAuthGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton mainAuthButton;
    private javax.swing.JButton mainMatchButton;
    public javax.swing.JPanel mainPanel;
    private javax.swing.JButton mainSaveButton;
    public static javax.swing.JDialog saveDialog;
    public javax.swing.JLabel saveDialogLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
